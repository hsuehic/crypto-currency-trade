# iTrade Project - AI Agent Documentation Rules

## üìÇ Documentation Structure

When creating or modifying documentation files, follow this structure:

### Root Level

- `README.md` - Project overview and main documentation entry point
- Keep root directory clean, avoid creating new documentation files here

### Documentation Directories

#### `/docs/` - Project-level Documentation

Main documentation hub for the entire project.

**Subdirectories:**

- `/docs/guides/` - User guides and tutorials
  - Quick start guides
  - How-to guides
  - Best practices
  - Examples: `PROJECT_QUICK_START.md`, `RUN_COMMANDS.md`, `STRATEGY_MANAGEMENT_GUIDE.md`

- `/docs/development/` - Development process documentation
  - Implementation summaries
  - Improvement logs
  - Migration guides
  - Bug fixes documentation
  - Examples: `CONSOLE_WEB_IMPROVEMENTS.md`, `IMPLEMENTATION_SUMMARY.md`, `IMPROVEMENTS_SUMMARY.md`

- `/docs/api/` - API reference documentation
  - Existing: `API-REFERENCE-MARKET-DATA.md`
  - API specifications
  - Interface documentation

- `/docs/architecture/` - Architecture and design documentation
  - System design documents
  - Architecture decisions (ADR)
  - Technical specifications
  - Existing: `DESIGN-ANALYSIS-MARKET-DATA-API.md`, `trading-engine-analysis.md`

#### Application-Specific Documentation

**Console Application** - `/apps/console/docs/`

- `QUICK_START.md` - Console quick start guide
- Application-specific guides
- Console configuration

**Web Application** - `/apps/web/docs/`

- Web application guides
- API documentation
- Deployment guides

**Mobile Application** - `/apps/mobile/docs/`

- Mobile setup guides
- Platform-specific documentation
- Build instructions

#### Package-Specific Documentation

**Core Package** - `/packages/core/docs/`

- Core functionality documentation
- Examples: `ORDER_SYNC_MECHANISM.md`, `ORDER_SYNC_IMPLEMENTATION.md`
- API reference for core modules

**Data Manager** - `/packages/data-manager/docs/`

- Database schema documentation
- Data migration guides

**Exchange Connectors** - `/packages/exchange-connectors/docs/`

- Exchange integration guides
- Per-exchange documentation

**Other Packages** - `/packages/{package-name}/docs/`

- Package-specific documentation
- Usage examples
- API reference

---

## üìù Documentation Naming Conventions

### File Names

- Use `UPPERCASE_WITH_UNDERSCORES.md` for important top-level docs
- Use `lowercase-with-hyphens.md` for regular documentation
- Use descriptive names: `QUICK_START.md`, `API_REFERENCE.md`

### Bilingual Documentation Naming

**Default Language**: English (no suffix)
**Chinese Version**: Add `_CN` suffix

Examples:

- `README.md` - English (default)
- `README_CN.md` - Chinese version
- `QUICK_START.md` - English
- `QUICK_START_CN.md` - Chinese version
- `API_REFERENCE.md` - English
- `API_REFERENCE_CN.md` - Chinese version

**Rationale**:

- English is the international standard for open-source projects
- Cursor AI and most development tools work best with English
- Makes the project more accessible to global developers

### Document Types and Locations

| Document Type | Location | Example |
|--------------|----------|---------|
| Quick Start Guide | `{app}/docs/QUICK_START.md` | `apps/console/docs/QUICK_START.md` |
| User Guide | `docs/guides/` | `docs/guides/STRATEGY_MANAGEMENT_GUIDE.md` |
| API Reference | `docs/api/` or `{package}/docs/` | `packages/core/docs/API_REFERENCE.md` |
| Implementation Log | `docs/development/` | `docs/development/IMPLEMENTATION_SUMMARY.md` |
| Architecture Doc | `docs/architecture/` | `docs/architecture/SYSTEM_DESIGN.md` |
| Package Feature Doc | `{package}/docs/` | `packages/core/docs/ORDER_SYNC_MECHANISM.md` |
| Troubleshooting | `docs/guides/` | `docs/guides/TROUBLESHOOTING.md` |
| Changelog | `docs/development/` | `docs/development/CHANGELOG.md` |

---

## üéØ When Creating New Documentation

### Step 1: Determine Document Type

Ask yourself:

- Is this a user guide? ‚Üí `docs/guides/`
- Is this implementation/improvement documentation? ‚Üí `docs/development/`
- Is this API reference? ‚Üí `docs/api/` or `{package}/docs/`
- Is this architecture/design? ‚Üí `docs/architecture/`
- Is this specific to an application? ‚Üí `apps/{app}/docs/`
- Is this specific to a package feature? ‚Üí `packages/{package}/docs/`

### Step 2: Choose Appropriate Location

```
# For a new core package feature
‚úÖ packages/core/docs/NEW_FEATURE.md
‚ùå /NEW_FEATURE.md (root directory)

# For console application guide
‚úÖ apps/console/docs/USAGE_GUIDE.md
‚ùå /CONSOLE_USAGE_GUIDE.md (root directory)

# For project-wide implementation summary
‚úÖ docs/development/FEATURE_IMPLEMENTATION.md
‚ùå /IMPLEMENTATION.md (root directory)

# For user guide or tutorial
‚úÖ docs/guides/HOW_TO_DEPLOY.md
‚ùå /DEPLOYMENT.md (root directory)
```

### Step 3: Link from README

Update the relevant README.md to reference your new documentation:

- Main `README.md` for project-level docs
- Package `README.md` for package-specific docs
- Application `README.md` for app-specific docs

---

## üìö Documentation Templates

### Quick Start Template

```markdown
# {Application/Package} Quick Start Guide

## Prerequisites
- List requirements

## Installation
- Step by step

## Usage
- Basic usage examples

## Next Steps
- Links to detailed guides
```

### Implementation/Feature Template

```markdown
# {Feature Name} Implementation

## Overview
Brief description

## Implementation Details
Technical details

## Usage
How to use

## Testing
How to test

## Related Documentation
Links to related docs
```

---

## üîÑ Migration Rules

When AI generates documentation in the root directory:

1. **Immediately recognize** the document type
2. **Move to appropriate location**:

   ```bash
   # Example
   mv ROOT_DOC.md docs/guides/ROOT_DOC.md
   # or
   mv FEATURE_DOC.md packages/core/docs/FEATURE_DOC.md
   ```

3. **Update any references** in other files
4. **Add to relevant README** for discoverability

---

## ‚úÖ Best Practices

1. **Keep root clean**: Only `README.md` and essential project files
2. **Use subdirectories**: Organize by type and scope
3. **Link documents**: Cross-reference related documentation
4. **Update READMEs**: Keep README files up-to-date with doc links
5. **Consistent naming**: Follow naming conventions
6. **Clear hierarchy**: User docs separate from dev docs

---

## üé® Document Structure

### Every Document Should Have

1. **Title** (H1)
2. **Brief description** (1-2 sentences)
3. **Table of contents** (for long docs)
4. **Main content** (well-structured with headings)
5. **Related links** (at the end)
6. **Last updated date** (optional but recommended)

---

## üìñ Examples of Well-Organized Documentation

### Good Examples ‚úÖ

```
packages/core/docs/
‚îú‚îÄ‚îÄ README.md (package overview + links to all docs)
‚îú‚îÄ‚îÄ ORDER_SYNC_MECHANISM.md (feature design)
‚îú‚îÄ‚îÄ ORDER_SYNC_IMPLEMENTATION.md (implementation)
‚îî‚îÄ‚îÄ API_REFERENCE.md (API docs)

apps/console/docs/
‚îú‚îÄ‚îÄ QUICK_START.md (how to start)
‚îú‚îÄ‚îÄ CONFIGURATION.md (config guide)
‚îî‚îÄ‚îÄ DEPLOYMENT.md (deployment guide)

docs/
‚îú‚îÄ‚îÄ guides/
‚îÇ   ‚îú‚îÄ‚îÄ PROJECT_QUICK_START.md
‚îÇ   ‚îî‚îÄ‚îÄ STRATEGY_MANAGEMENT_GUIDE.md
‚îú‚îÄ‚îÄ development/
‚îÇ   ‚îú‚îÄ‚îÄ IMPLEMENTATION_SUMMARY.md
‚îÇ   ‚îî‚îÄ‚îÄ CONSOLE_WEB_IMPROVEMENTS.md
‚îî‚îÄ‚îÄ architecture/
    ‚îî‚îÄ‚îÄ SYSTEM_DESIGN.md
```

### Bad Examples ‚ùå

```
# Don't do this:
‚îú‚îÄ‚îÄ QUICK_START.md (which app?)
‚îú‚îÄ‚îÄ FEATURE_1.md (unclear purpose)
‚îú‚îÄ‚îÄ NEW_IMPLEMENTATION.md (what implementation?)
‚îú‚îÄ‚îÄ DOCS.md (too vague)
‚îî‚îÄ‚îÄ NOTES.md (should be in proper location)
```

---

## ü§ñ AI Agent Instructions

When you (AI) create documentation:

1. **NEVER put files in root directory** (except README.md updates)
2. **ASK** if unclear where to place: "This looks like a {type} document. Should I place it in {location}?"
3. **SUGGEST** appropriate location based on content
4. **CREATE** directory structure if it doesn't exist
5. **UPDATE** relevant README files with links
6. **FOLLOW** naming conventions consistently

### Decision Tree for AI

```
Is it a Quick Start?
‚îî‚îÄ Yes ‚Üí apps/{app}/docs/QUICK_START.md
‚îî‚îÄ No ‚Üì

Is it implementation/improvement documentation?
‚îî‚îÄ Yes ‚Üí docs/development/{NAME}.md
‚îî‚îÄ No ‚Üì

Is it a package feature documentation?
‚îî‚îÄ Yes ‚Üí packages/{package}/docs/{FEATURE}.md
‚îî‚îÄ No ‚Üì

Is it a user guide?
‚îî‚îÄ Yes ‚Üí docs/guides/{NAME}.md
‚îî‚îÄ No ‚Üì

Is it architecture/design?
‚îî‚îÄ Yes ‚Üí docs/architecture/{NAME}.md
‚îî‚îÄ No ‚Üì

Is it API reference?
‚îî‚îÄ Yes ‚Üí docs/api/{NAME}.md or packages/{package}/docs/API.md
```

---

## üìå Summary

**Golden Rule**: Documentation should be close to what it documents.

- **Application docs** ‚Üí `apps/{app}/docs/`
- **Package docs** ‚Üí `packages/{package}/docs/`
- **Project docs** ‚Üí `docs/{category}/`
- **Root directory** ‚Üí Keep clean!

When in doubt, put it in `docs/guides/` and organize later.

**Remember**: Good documentation structure makes the project more maintainable and user-friendly! üìö‚ú®

---

## ‚úçÔ∏è Documentation Signature Rules

### Required Ending Signature

**All documentation, posts, and technical articles MUST end with the following signature format:**

```markdown
---

Author: xiaoweihsueh@gmail.com  
Date: [Current Date in format: Month Day, Year]
```

### Examples

#### For Documentation Files

```markdown
---

Author: xiaoweihsueh@gmail.com  
Date: [Current Date in format: Month Day, Year]
```

#### For Wiki Posts

```markdown
---

*This article is written based on actual development experience of the iTrade project.*

Author: xiaoweihsueh@gmail.com  
Date: [Current Date in format: Month Day, Year]
```

#### For Implementation Summaries

```markdown
---

*Implementation completed and verified through automated testing.*

Author: xiaoweihsueh@gmail.com  
Date: [Current Date in format: Month Day, Year]
```

### AI Agent Instructions for Signatures

1. **ALWAYS include** the signature at the end of every document
2. **Use the actual current date when you are writing** (e.g., if today is December 10, 2024, use "December 10, 2024")
3. **Do NOT use placeholder text** - always replace with the real current date
4. **Do NOT include version numbers** - only Author and Date
5. **Maintain consistent formatting** with the examples above
6. **Add contextual notes** above the signature when appropriate (e.g., project context, implementation status)

**Critical**:

- When you see `[Current Date in format: Month Day, Year]` in the template, replace it with TODAY'S actual date
- Format: "Month Day, Year" (e.g., "December 10, 2024")
- Use the date when you are actually creating/updating the document, not a fixed date

### Signature Placement

- Place signature **after main content** but **before references/links section**
- Use `---` horizontal rule to separate signature from main content
- Keep signature formatting consistent across all documents

This ensures consistent authorship attribution and helps track document creation/modification dates across the entire project.

---

## üîß Code Quality and Linting Rules

### Mandatory Post-Edit Linting

**After ANY modification to source code or documentation files, AI agents MUST execute appropriate linting commands to ensure code quality and formatting compliance.**

#### Required Actions After Code Changes

1. **For TypeScript/JavaScript files** (`.ts`, `.tsx`, `.js`, `.jsx`):

   ```bash
   # Run lint check for the specific project
   pnpm lint                    # For Next.js apps
   npm run lint                 # For other packages
   
   # If linting errors are found, attempt to auto-fix
   pnpm lint --fix             # Auto-fix when possible
   ```

2. **For Markdown files** (`.md`):

   ```bash
   # Check markdown formatting
   pnpm lint                   # If project has markdown linting
   # Or use dedicated markdown linter if available
   ```

3. **For JSON/Config files** (`.json`, `.yaml`, `.yml`):

   ```bash
   # Validate JSON/YAML syntax
   pnpm lint                   # Project-specific linting
   ```

#### Workflow Requirements

1. **ALWAYS run linting** after making code changes
2. **REPORT linting results** to the user
3. **ATTEMPT to fix** common formatting issues automatically
4. **STOP and ask for guidance** if critical errors cannot be auto-fixed
5. **NEVER leave broken code** - ensure all changes compile and pass basic checks

#### Project-Specific Lint Commands

| Project Location | Command | Description |
|------------------|---------|-------------|
| `/apps/web/` | `pnpm lint` | Next.js web application linting |
| `/apps/console/` | `pnpm lint` | Node.js console application linting |
| `/apps/mobile/` | `flutter analyze` | Flutter mobile app analysis |
| `/packages/*/` | `pnpm lint` or `npm run lint` | Package-specific linting |
| Root directory | `pnpm lint:all` | Lint all workspaces (if available) |

#### Error Handling Protocol

```markdown
1. Run appropriate lint command
2. If errors found:
   - Try auto-fix: `pnpm lint --fix`
   - Report remaining errors to user
   - Provide specific line numbers and descriptions
   - Suggest manual fixes if auto-fix failed
3. If critical errors:
   - Do not proceed with additional changes
   - Ask user for guidance on error resolution
4. If warnings only:
   - Report warnings but may proceed
   - Suggest improvements for code quality
```

#### AI Agent Instructions for Linting

1. **EXECUTE linting immediately** after any file modification
2. **USE the read_lints tool** to check for specific file linting errors
3. **BATCH lint checks** when modifying multiple files in the same project
4. **PRIORITIZE auto-fixable issues** over manual interventions
5. **DOCUMENT any persistent errors** that require manual attention

#### Example Workflow

```bash
# After modifying apps/web/components/example.tsx
cd apps/web
pnpm lint

# If errors found
pnpm lint --fix

# Check specific file if needed
pnpm lint --file components/example.tsx
```

#### Quality Gates

- **No compilation errors** allowed
- **Critical linting errors** must be resolved
- **Warnings should be minimized** where possible
- **Consistent formatting** across all files
- **Import organization** following project standards

#### Skip Conditions

Linting may be skipped ONLY when:

- User explicitly requests to skip linting
- Working on draft/experimental code that user acknowledges is temporary
- System/configuration files that don't support linting

**Default behavior: ALWAYS run linting unless explicitly told otherwise.**
